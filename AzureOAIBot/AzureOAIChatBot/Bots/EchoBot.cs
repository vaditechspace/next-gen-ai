using AOAIProcessor;
using Azure.AI.OpenAI;
using Microsoft.Bot.Builder;
using Microsoft.Bot.Schema;
using Microsoft.Extensions.Configuration;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace AzureOAIChatBot.Bots
{
    public class EchoBot : ActivityHandler
    {
        private readonly IConfiguration _configuration;
        public EchoBot(IConfiguration configuration)
        {
            _configuration = configuration;
        }

        /// <summary>
        /// Handles incoming message activities and processes them asynchronously.
        /// This method is called when a message is received from the user.
        /// </summary>
        /// <param name="turnContext">The context for the current turn of the conversation.</param>
        /// <param name="cancellationToken">Cancellation token to manage task cancellation.</param>
        /// <returns>A Task representing the asynchronous operation.</returns>
        protected override async Task OnMessageActivityAsync(ITurnContext<IMessageActivity> turnContext, CancellationToken cancellationToken)
        {
            // Call the ProcessMessage method to handle the received message activity and generate a response using Azure OpenAI.
            await ProcessMessage(turnContext, cancellationToken);
        }
            
        protected override async Task OnMembersAddedAsync(IList<ChannelAccount> membersAdded, ITurnContext<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken)
        {
            var welcomeText = "Hello and welcome!";
            foreach (var member in membersAdded)
            {
                if (member.Id != turnContext.Activity.Recipient.Id)
                {
                    await turnContext.SendActivityAsync(MessageFactory.Text(welcomeText, welcomeText), cancellationToken);
                }
            }
        }

        /// <summary>
        /// Processes incoming messages from the user and sends responses generated by AOAIProcessor library.
        /// </summary>
        /// <param name="turnContext">The context for the current turn of the conversation.</param>
        /// <param name="cancellationToken">Cancellation token to manage task cancellation.</param>
        /// <returns>A Task representing the async operation.</returns>
        private async Task ProcessMessage(ITurnContext<IMessageActivity> turnContext, CancellationToken cancellationToken)
        {
            // Retrieve Azure OpenAI configuration settings from the app settings
            //NOTE: You dont need to read this everytime, you can use Conversation State. 
            string azOpenAIUrl = _configuration["AzOpenAIUrl"];
            string azOpenAIApiKey = _configuration["AzOpenAIApiKey"];
            string azOpenAIModel = _configuration["AzOpenAIModel"];

            // Get the user's message from the turn context and trim any whitespace
            string message = turnContext.Activity.Text.Trim();

            if (!string.IsNullOrEmpty(message))
            {
                // Create an instance of the AzureOAI class for interacting with Azure OpenAI
                AzureOAI azureOAI = new AzureOAI(azOpenAIUrl, azOpenAIApiKey, azOpenAIModel);
                // Call the TalkToMe method of AzureOAI to get a response for the user's message
                string content = azureOAI.TalkToMe(message);
                // Send the response back to the user
                await turnContext.SendActivityAsync(MessageFactory.Text(content), cancellationToken);
            }
        }
    }
}
